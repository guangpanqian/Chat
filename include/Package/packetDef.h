#pragma once
#include <WinSock2.h>

#pragma pack(1)

// ------------------------------------定义一些缺省值---------------------------------------------------------------------------------------------------------
// DES 加解密KEY
#define DES_KEY										"13576"
// 监听端口号
#define CHAT_SERVER_PORT							44581
// 服务器IP地址
#define CHAT_SERVER_IP								"192.168.1.80"
// ------------------------------------------------------------------------------------------------------------------------------------------------------------


// ------------------------------------定义一些长度------------------------------------------------------------------------------------------------------------
// 用户ID长度
#define USER_ID_LENGTH								10
// 用户IP长度
#define USER_IP_LENGHT								16
// 用户名字长度
#define USER_NAME_LENGTH							7
// 用户密码长度
#define USER_PASSWORD_LENGTH						10
// 消息最长长度
#define USER_MESSAGE_MAX_LENGTH						100
// -------------------------------------------------------------------------------------------------------------------------------------------------------------


// -------------------------------------定义数据包ID------------------------------------------------------------------------------------------------------------
// 登陆包ID
#define PACKET_ID_LOGIN								1000
// 请求列表ID
#define PACKET_ID_USERS								1001
// 心跳包ID
#define PACKET_ID_HEART								1002
// 在线状态改变包ID
#define PACKET_ID_STATUS_CHANGE						1003
// 离线消息包ID
#define PACKET_ID_MESSAGE_OFFLINE					1004
// 在线消息包ID
#define PACKET_ID_MESSAGE_ONLINE					1005
// 获取离线消息数据包ID
#define PACKET_ID_LOAD_OFFLINE						1006
// --------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------定义一些常量----------------------------------------------------------------------------------------------------------
// 客户端最长心跳时常
#define CLIENT_HEART_MAX_SECONDS					60
// --------------------------------------------------------------------------------------------------------------------------------------------------------------


// --------------------------------数据包协议头------------------------------------------------------------------------------------------------------------------
// 数据包头结构，每个数据包都以这个头作为开始，标识了包的类型和数据包的长度。
typedef struct _packet_hdr
{
	u_short type;		// 数据包类型
	DWORD len;			// 数据包总长度包含头
}PACKET_HDR,*PPACKET_HDR;
// --------------------------------数据包协议头-------------------------------------------------------------------------------------------------------------------


// -------------------------------用户登陆协议-------------------------------------------------------------------------------------------------------------------
// 登陆结构体
typedef struct _login_info
{
	u_short userId;								// 用户id
	char userPassword[USER_PASSWORD_LENGTH];	// 用户密码
	u_short port;								// 用户所在机器的端口号
}LOGIN,*PLOGIN;

// 登陆数据包，把账号，密码和端口发送过来，进行验证
typedef struct _packet_login
{
	PACKET_HDR header;
	LOGIN              login;
}PACKET_LOGIN,*PPACKET_LOGIN;

//登陆返回结构
typedef struct _login_info_a
{
	char userName[USER_NAME_LENGTH];	// 登陆名字
	int succeed;						// 是否登陆成功
}LOGINA,*PLOGINA;

// 登陆返回包，返回用户名称和是否验证成功
typedef struct _packet_login_a
{
	PACKET_HDR header;
	LOGINA loginA;
}PACKET_LOGIN_A,*PPACKET_LOGIN_A;
// -------------------------------用户登陆协议--------------------------------------------------------------------------------------------------------------------



// ---------------------------------用户列表状态请求协议----------------------------------------------------------------------------------------------------------
typedef enum _user_status
{
	ONLINE,
	OFFLINE
}USER_STATUS;

// 请求用户列表包，只有一个包头就可以了
typedef struct _packet_users
{
	PACKET_HDR header;
}PACKET_USERS,*PPACKET_USERS;

// 用户当前在线、离线状态
typedef struct _user_online_status
{
	u_short		id;
	char userName[USER_NAME_LENGTH];
	USER_STATUS status;     
    u_short    port;
	char ip[USER_IP_LENGHT];
}USER_ONLINE,*PUSER_ONLINE;

// 用户列表回复包，传回整个列表所有用户的状态
typedef struct _packet_users_a
{
	PACKET_HDR header;
	u_short count;
	USER_ONLINE *pUsers;
}PACKET_USERS_A,*PPACKET_USERS_A;
// ---------------------------------用户列表状态请求协议---------------------------------------------------------------------------------------------------------


// ---------------------------------用户状态改变协议-------------------------------------------------------------------------------------------------------------
// 用户状态列表回复包
typedef PACKET_USERS_A  PACKET_STATUS_CHANGE,*PPACKET_STATUS_CHANGE;
// ---------------------------------用户状态改变协议-------------------------------------------------------------------------------------------------------------



// ----------------------------------心跳协议--------------------------------------------------------------------------------------------------------------------
// 心跳包，只有一个头即可
typedef struct _packet_heart
{
	PACKET_HDR headr;
}PACKET_HEART, *PPACKET_HEART;
// ----------------------------------心跳协议--------------------------------------------------------------------------------------------------------------------



// -----------------------------------离线消息提交协议------------------------------------------------------------------------------------------------------------
typedef struct _packet_user_message
{
	u_short senderId;
	u_short peerId;
	char message[USER_MESSAGE_MAX_LENGTH];
}PACKET_USER_MESSAGE,*PPACKET_USER_MESSAGE;

// 离线消息包，标识谁发给谁的什么信息
typedef struct _packet_message
{
	PACKET_HDR headr;
	PACKET_USER_MESSAGE userMessage;
}PACKET_MESSAGE,*PPACKET_MESSAGE;
// -----------------------------------离线消息提交协议------------------------------------------------------------------------------------------------------------



// -----------------------------------请求发给自己的离线消息协议--------------------------------------------------------------------------------------------------
// 离线消息请求包，查看是否有好友发送离线消息
typedef struct _packet_offline_message
{
	PACKET_HDR header;
	u_short id;
}PACKET_OFFLINE_MESSAGE,*PPACKET_OFFLINE_MESSAGE;

// 离线消息返回包， 返回发送给该用户的离线消息
typedef struct _packet_offline_message_a
{
	PACKET_HDR header;
	u_short counts;
	PPACKET_USER_MESSAGE messages;
}PACKET_OFFLINE_MESSAGE_A,*PPACKET_OFFLINE_MESSAGE_A;
// -----------------------------------请求发给自己的离线消息协议--------------------------------------------------------------------------------------------------


#pragma pack()